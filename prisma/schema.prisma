// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Roles {
  AGENT
  CLIENT
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?    @unique
  email         String?    @unique
  password      String?
  phoneNumber   String?
  emailVerified DateTime?
  image         String?
  role          Roles      @default(CLIENT)
  reviews       Review[]
  tours         Tour[]     @relation("UserToTour")
  property      Property[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   @unique
  about    String
  location String
  price    Float
  images   String[]
  features Features
  reviews  Review[]
  tourId   String[] @db.ObjectId
  tours    Tour[]   @relation("PropertyToTour", fields: [tourId], references: [id])
  agentId  String   @db.ObjectId
  agent    User     @relation(fields: [agentId], references: [id])
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  stars      Int
  experience String
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  propertyId String   @db.ObjectId
  property   Property @relation(fields: [propertyId], references: [id])

  @@index([propertyId])
  @@index([userId])
}

type Details {
  bedroom    Float
  bathroom   Float
  spuareArea Float
  parking    Float
  built      Float
}

type Features {
  availability   Boolean
  type           String
  cooling        String
  yearBuilt      Float
  location       String
  parkingSpace   Boolean
  size           Float
  kitchenCabinet Boolean
}

model Tour {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String     @db.ObjectId
  user       User       @relation("UserToTour", fields: [userId], references: [id])
  propertyId String[]   @db.ObjectId
  property   Property[] @relation("PropertyToTour", fields: [propertyId], references: [id])
}
